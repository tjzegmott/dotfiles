# General stuff.
[general]
# Here you define a comma separated list of targets.  Each of them must have a
# section below determining their properties, how to query them, etc.  The name
# is just a symbol, and doesn't have any functional importance.
targets = chime_github

# If unspecified, the default taskwarrior config will be used.
#taskrc = /path/to/.taskrc

# Setting this to true will shorten links with http://da.gd/
#shorten = False

# Setting this to True will include a link to the ticket in the description
inline_links = False

# Setting this to True will include a link to the ticket as an annotation
annotation_links = True

# Setting this to True will include issue comments and author name in task
# annotations
annotation_comments = False

# Defines whether or not issues should be matched based upon their description.
# In legacy mode, we will attempt to match issues to bugs based upon the
# presence of the '(bw)' marker in the task description.
# If this is false, we will only select issues having the appropriate UDA
# fields defined (which is smarter, better, newer, etc..)
legacy_matching = False

# log.level specifies the verbosity.  The default is DEBUG.
# log.level can be one of DEBUG, INFO, WARNING, ERROR, CRITICAL, DISABLED
#log.level = DEBUG

# If log.file is specified, output will be redirected there.  If it remains
# unspecified, output is sent to sys.stderr
#log.file = /var/log/bugwarrior.log

# Configure the default description or annotation length.
#annotation_length = 45

# Use hooks to run commands prior to importing from bugwarrior-pull.
# bugwarrior-pull will run the commands in the order that they are specified
# below.
#
# pre_import: The pre_import hook is invoked after all issues have been pulled
# from remote sources, but before they are synced to the TW db. If your
# pre_import script has a non-zero exit code, the `bugwarrior-pull` command will
# exit early.
[hooks]
#pre_import = /home/someuser/backup.sh, /home/someuser/sometask.sh

# This section is for configuring notifications when bugwarrior-pull runs,
# and when issues are created, updated, or deleted by bugwarrior-pull.
# Three backends are currently supported:
#
#  - growlnotify (v2)   Mac OS X   "gntp" must be installed
#  - gobject            Linux      python gobject must be installed
#
# To configure, adjust the settings below.  Note that neither of the #
# "sticky" options have any effect on Linux.  They only work for
# growlnotify.
# [notifications]
# notifications = True
# backend = growlnotify
# finished_querying_sticky = False
# task_crud_sticky = True
# only_on_new_tasks = True


# This is a github example.  It says, "scrape every issue from every repository
# on http://github.com/ralphbean.  It doesn't matter if ralphbean owns the issue
# or not."
[chime_github]
service = github

# This specifies that we should pull issues from repositories belonging
# to the 'ralphbean' github account.  See the note below about
# 'github.username' and 'github.login'.  They are different, and you need
# both.
github.username = CHIMEFRB

# I want taskwarrior to include issues from all my repos, except these
# two because they're spammy or something.
#github.exclude_repos = project_bar,project_baz

# Working with a large number of projects, instead of excluding most of them I
# can also simply include just a limited set.
#github.include_repos = project_foo,project_foz

# Note that login and username can be different:  I can login as me, but
# scrape issues from an organization's repos.
#
# - 'github.login' is the username you ask bugwarrior to
#   login as.  Set it to your account.
# - 'github.username' is the github entity you want to pull
#   issues for.  It could be you, or some other user entirely.
github.login = tjzegmott
github.password = @oracle:eval:gh auth token

# If set to a username, only import issues assigned to the specified user.
github.only_if_assigned = tjzegmott
github.filter_pull_requests = True

# If set to True and only_if_assigned is set, then also create tasks for issues that are 
# not assigned to anybody. Defaults to False.
# github.also_unassigned = False

# Assign this priority (‘L’, ‘M’, or ‘H’) to newly-imported issues. Defaults to M.
github.default_priority = M

# A comma-separated list of tags to add to an issue. In most cases, plain strings will 
# suffice, but you can also specify templates. See the section Field Templates for more 
# information.
github.add_tags = #{{githubnumber}}, {{githubtype}}

# By default, Bugwarrior will import issues with a fairly verbose description template 
# looking something like this:
# (BW)Issue#10 - Fix perpetual motion machine .. http://media.giphy.com/media/LldEzRPqyo2Yg/giphy.gif
# but depending upon your workflow, the information presented may not be useful to you.
github.description_template = {{githubnumber}}: {{githubtitle}}

# You can also use this tool for altering the generated value of any other Taskwarrior 
# record field by using the same kind of template.
# Uppercasing the project name for imported issues:
github.project_template = {{githubrepo|upper}}

# You can also use this feature to override the generated value of any field. This example
# causes imported issues to be assigned to the ‘Office’ project regardless of what project
# was assigned by the service itself:
# github.project_template = Office


# Here's an example of a trac target.
# [moksha_trac]
# service = trac
# 
# trac.base_uri = fedorahosted.org/moksha
# trac.username = ralph
# trac.password = OMG_LULZ
# 
# trac.only_if_assigned = ralph
# trac.also_unassigned = True
# trac.default_priority = H
# trac.add_tags = work

# Here's an example of a megaplan target.
# [my_megaplan]
# service = megaplan
# 
# megaplan.hostname = example.megaplan.ru
# megaplan.login = alice
# megaplan.password = secret
# megaplan.project_name = example

# Here's an example of a jira project. The ``jira-python`` module is
# a bit particular, and jira deployments, like Bugzilla, tend to be
# reasonably customized. So YMMV. The ``base_uri`` must not have a
# have a trailing slash. In this case we fetch comments and
# cases from jira assigned to 'ralph' where the status is not closed or
# resolved.
# [jira_project]
# service = jira
# jira.base_uri = https://jira.example.org
# jira.username = ralph
# jira.password = OMG_LULZ
# jira.query = assignee = ralph and status != closed and status != resolved
# Set this to your jira major version. We currently support only jira version
# 4 and 5(the default). You can find your particular version in the footer at
# the dashboard.
# jira.version = 5
# jira.add_tags = enterprisey,work

# Here's an example of a phabricator target
# [my_phabricator]
# service = phabricator
# No need to specify credentials.  They are gathered from ~/.arcrc

# Here's an example of a teamlab target.
# [my_teamlab]
# service = teamlab
# 
# teamlab.hostname = teamlab.example.com
# teamlab.login = alice
# teamlab.password = secret
# teamlab.project_name = example_teamlab

# Here's an example of a redmine target.
# [my_redmine]
# service = redmine
# redmine.url = http://redmine.example.org/
# redmine.key = c0c4c014cafebabe
# redmine.user_id = 7
# redmine.project_name = redmine
# redmine.add_tags = chiliproject
# 
# [activecollab]
# service = activecollab
# activecollab.url = https://ac.example.org/api.php
# activecollab.key = your-api-key
# activecollab.user_id = 15
# activecollab.add_tags = php
# 
# [activecollab2]
# service = activecollab2
# activecollab2.url = http://ac.example.org/api.php
# activecollab2.key = your-api-key
# activecollab2.user_id = 15
# activecollab2.projects = 1:first_project, 5:another_project
# 
# [my_gmail]
# service = gmail
# gmail.query = label:action OR label:readme
# gmail.login_name = you@example.com
